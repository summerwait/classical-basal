<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title>(forEach&map兼容性处理)&回调函数深入理解</title>
</head>
<body>
<!--数组方法中的forEach和map:::
    forEach:用来循环遍历数组每一项的，第一个参数是一个函数（匿名回调函数），不支持返回值~
        PS 1 数组中有几项就执行这个匿名回调函数几次
        PS 2 每次这个匿名回调函数执行会默认传三个参数 item,index,originArray（当前数组项，索引，原数组）
        PS 3 理论上forEach方法是不会修改数组的，仅仅是用来遍历数组，但我们可以在回调函数中利用索引去修改数组，input[index] = item*10 这样写就会将原来数组每一项都*10，注意：是修改了原有数组，可以console.log(ary);来看数组被修改的结果，但仍旧是没有返回值（undefined）

    map:用法和forEach相同，也是用来遍历数组中每一项的，但不同之处在于，map支持回调函数中返回值，return返回的值可以修改数组，却不会改变原有数组，作用相当于克隆一个原来一样的数组按return的去修改，并返回出来

    forEach和map都支持传第二个参数，是将匿名回调函数中的this修改成第二个参数的
    在ie6-8中，没有Array.prototype上没有forEach和map这两个方法。
-->
<script type="text/javascript" charset="UTF-8">
    var ary = [23,34,45];
    var obj = {name : "summer"};

    //myForEach
/*    Array.prototype.myForEach = function myForEach (callBack,context){
        context = context || window;//傻瓜 忘了这句话了，其实不写也可以，但是写上更严谨！以后注意
        //模拟forEach方法 -> 可以传两个参数 1 匿名回调函数 2 想把this变成谁
        if('forEach' in Array.prototype){//in -> 判断forEach是不是数组类原型上的属性 '属性名' in xxx ==> 标准浏览器下是执行这里的代码
            this.forEach(callBack,context);
            return;
        }
        //forIE6-8
        for(var i = 0; i < this.length; i++){
            //callBack && callBack.call(context,this[i],i,this);
            typeof callBack === 'function' ? callBack.call(context,this[i],i,this) : void 0;
        }

    };
    ary.myForEach(function (){
        console.log(this);
    },obj);*/

    //myMap
    Array.prototype.myMap = function myMap (callBack,context){
        context = context || window;
        if('map' in Array.prototype){
            return this.map(callBack,context);
        }
        //forIE6-8
        var newAry = [];
        for(var i = 0; i < this.length; i++){
            newAry[newAry.length] = callBack && callBack.call(context,this[i],i,this);
        }
        return newAry;
    };
    var res = ary.myMap(function (item,index,input){
        console.log(this);
        return item * 10;//return input[index] = item * 10;//这样写会把原数组也改变
    },obj);
    console.log(res);//return后面把数组每项*10并返回，得到了一个新数组，ps：注意用法
    console.log(ary);//原数组，不改变

</script>
</body>
</html>
